
# Copyright (C) 2000-2008. MindTree Ltd.
# All rights reserved.

# Makefile for MindTree Bluetooth Stack
# Written in compliance with GNU Make

#
# ==== User Definition Section ================================
#

#
# Feature Flags that you want to include for this build.
# (For example, -DGATT_DB, -DATT_CLIENT etc.)
#
FEATURE_FLAGS =

#
# Debug Flags that you want to include for this build.
# (For example, -DL2CAP_DEBUG, -DHCI_DEBUG etc.)
#
DEBUG_FLAGS =

ifeq ($(MEMWATCH), 1)
DEBUG_FLAGS += -DMEMWATCH -DMEMWATCH_STDIO
endif


# ---- End of User Definition Section -------------------------


#
# ---- Ideally, there should not be any need to touch anything
# ---- below this point. Contact the author if you have any need
# ---- to modify below this line.
#

# --------------------------- Variable definitions

# EtherMind directory references
include ./sdk_path.defines

# Host directives
include ./sdk_host.defines

# Compiler & Linker location
include ./sdk_toolchain.defines.$(TOOL_CHAIN)

# SDK Configurations
include ./sdk_target.defines.$(TARGET)

# Root Directories
OSAL_ROOT = $(ROOT)/../../../components/ethermind/osal
UTILS_INC  = $(ROOT)/../../../components/ethermind/utils
MESH_ROOT = $(ROOT)/mesh
PLATFORM_ROOT = $(ROOT)/../../../components/ethermind/platforms
COMPONENT_ROOT = $(ROOT)/../../../components/ethermind/mesh
DRIVER_INC  = $(ROOT)/../../../components
MISC_INC  = $(ROOT)/../../../misc

# File to Log Size Calculations (if any)
SIZE_LOG = size_ethermind_mesh_lib_$(TARGET_OS)_$(TOOL_CHAIN)_$(TARGET).txt

# Library Name
LIB_CORENAME = libethermind_mesh_core.$(LIB_EXTENSION)
LIB_MODELSNAME = libethermind_mesh_models.$(LIB_EXTENSION)

# Common Compilation Flags.
COMPILATION_FLAGS = \
	$(FEATURE_FLAGS) \
	$(DEBUG_FLAGS) \
	$(WARNING_FLAG) \
	$(OPTIMIZATION_FLAG) \
	$(SDK_FLAGS)

# Include Directories for Header Files.
INCLUDE_DIRS = \
	$(SDK_INCLUDES) \
	-I$(ROOT)/include/ \
	-I$(MISC_INC)/ \
	-I$(DRIVER_INC)/driver/flash/ \
	-I$(DRIVER_INC)/driver/timer/ \
	-I$(DRIVER_INC)/driver/gpio/ \
	-I$(DRIVER_INC)/arch/cm0/ \
	-I$(DRIVER_INC)/driver/clock/ \
	-I$(PLATFORM_ROOT)/ \
	-I$(PLATFORM_ROOT)/mesh/ \
	-I$(PLATFORM_ROOT)/interfaces/crypto \
	-I$(UTILS_INC)/include/ \
	-I$(OSAL_ROOT)/src/$(TARGET_OS)/ \
	-I$(COMPONENT_ROOT)/export/include/ \
	-I$(COMPONENT_ROOT)/export/platforms/ext/ \
	-I$(COMPONENT_ROOT)/export/cbtimer/ \
	-I$(MESH_ROOT)/private/core/access/ \
	-I$(MESH_ROOT)/private/core/bearer/ \
	-I$(MESH_ROOT)/private/core/common/ \
	-I$(MESH_ROOT)/private/core/fsm/ \
	-I$(MESH_ROOT)/private/core/ltrans/ \
	-I$(MESH_ROOT)/private/core/net/ \
	-I$(MESH_ROOT)/private/core/provision/ \
	-I$(MESH_ROOT)/private/core/trans/ \
	-I$(MESH_ROOT)/private/models/config/ \
	-I$(MESH_ROOT)/private/models/health/ \
	-I$(MESH_ROOT)/private/models/generic/ \
	-I$(MESH_ROOT)/private/models/light/ \
	-I$(MESH_ROOT)/private/models/time_and_scenes/ \
	-I$(MESH_ROOT)/private/utils/sec_tbx/

override CFLAGS = $(TOOLCHAIN_CFLAGS) $(COMPILATION_FLAGS) $(INCLUDE_DIRS)
NON_ANSI_CFLAGS = $(TOOLCHAIN_ADDL_CFLAGS) $(COMPILATION_FLAGS) $(INCLUDE_DIRS)


# VPATHs
vpath %.c .:\
	$(MESH_ROOT)/private/core/access/: \
	$(MESH_ROOT)/private/core/bearer/: \
	$(MESH_ROOT)/private/core/common/: \
	$(MESH_ROOT)/private/core/fsm/: \
	$(MESH_ROOT)/private/core/ltrans/: \
	$(MESH_ROOT)/private/core/net/: \
	$(MESH_ROOT)/private/core/provision/: \
	$(MESH_ROOT)/private/core/trans/: \
	$(MESH_ROOT)/private/models/config/: \
	$(MESH_ROOT)/private/models/health/: \
	$(MESH_ROOT)/private/models/generic/: \
	$(MESH_ROOT)/private/models/light/: \
	$(MESH_ROOT)/private/models/time_and_scenes/: \
	$(MESH_ROOT)/private/utils/sec_tbx/:

#
# Object Modules ...
#
COMMON_MODULE = common
BEARER_MODULE = bearer
TRANSPORT_MODULE = transport
NET_MODULE = net
ACCESS_MODULE = access
PROVISION_MODULE = provision
UTILS_MODULE = utils

MODEL_CORECLIENT_MODULE = model_coreclient
MODEL_CORESERVER_MODULE = model_coreserver
MODEL_CLIENT_MODULE = model_client
MODEL_SERVER_MODULE = model_server

# Module specific Object Files

COMMON_OBJS = \
	MS_common.$(OBJ_EXTENSION) \
	MS_utils.$(OBJ_EXTENSION)

BEARER_OBJS = \
	brr_init.$(OBJ_EXTENSION) \
	brr_api.$(OBJ_EXTENSION)

TRANSPORT_OBJS = \
	ltrn_init.$(OBJ_EXTENSION) \
	ltrn_api.$(OBJ_EXTENSION) \
	ltrn_replay_cache.$(OBJ_EXTENSION) \
	trn_init.$(OBJ_EXTENSION) \
	trn_api.$(OBJ_EXTENSION) \
	trn_friend.$(OBJ_EXTENSION)

NET_OBJS = \
	net_init.$(OBJ_EXTENSION) \
	net_api.$(OBJ_EXTENSION) \
	net_msg_cache.$(OBJ_EXTENSION) \
	net_iface.$(OBJ_EXTENSION) \
	net_proxy.$(OBJ_EXTENSION)

ACCESS_OBJS = \
	access_init.$(OBJ_EXTENSION) \
	access_api.$(OBJ_EXTENSION) \
	access_config_manager.$(OBJ_EXTENSION) \
	access_ps.$(OBJ_EXTENSION)

PROVISION_OBJS = \
	prov_api.$(OBJ_EXTENSION) \
	prov_fsm_engine.$(OBJ_EXTENSION) \
	prov_fsm_handlers.$(OBJ_EXTENSION) \
	prov_fsm_table.$(OBJ_EXTENSION) \
	prov_init.$(OBJ_EXTENSION) \
	prov_internal.$(OBJ_EXTENSION)

UTILS_OBJS = \
	fsm_engine.$(OBJ_EXTENSION) \
	sec_tbx.$(OBJ_EXTENSION)

MODEL_CORECLIENT_OBJS = \
	config_client.$(OBJ_EXTENSION) \
	health_client.$(OBJ_EXTENSION)

MODEL_CLIENT_OBJS = \
	generic_battery_client.$(OBJ_EXTENSION) \
	generic_default_transition_time_client.$(OBJ_EXTENSION) \
	generic_level_client.$(OBJ_EXTENSION) \
	generic_location_client.$(OBJ_EXTENSION) \
	generic_onoff_client.$(OBJ_EXTENSION) \
	generic_power_level_client.$(OBJ_EXTENSION) \
	generic_power_onoff_client.$(OBJ_EXTENSION) \
	generic_property_client.$(OBJ_EXTENSION) \
	light_ctl_client.$(OBJ_EXTENSION) \
	light_hsl_client.$(OBJ_EXTENSION) \
	light_lc_client.$(OBJ_EXTENSION) \
	light_lightness_client.$(OBJ_EXTENSION) \
	light_xyl_client.$(OBJ_EXTENSION) \
	scene_client.$(OBJ_EXTENSION)

MODEL_CORESERVER_OBJS = \
	config_server.$(OBJ_EXTENSION) \
	health_server.$(OBJ_EXTENSION)

MODEL_SERVER_OBJS = \
	generic_admin_property_server.$(OBJ_EXTENSION) \
	generic_battery_server.$(OBJ_EXTENSION) \
	generic_client_property_server.$(OBJ_EXTENSION) \
	generic_default_transition_time_server.$(OBJ_EXTENSION) \
	generic_level_server.$(OBJ_EXTENSION) \
	generic_location_server.$(OBJ_EXTENSION) \
	generic_location_setup_server.$(OBJ_EXTENSION) \
	generic_manufacturer_property_server.$(OBJ_EXTENSION) \
	generic_onoff_server.$(OBJ_EXTENSION) \
	generic_power_level_server.$(OBJ_EXTENSION) \
	generic_power_level_setup_server.$(OBJ_EXTENSION) \
	generic_power_onoff_server.$(OBJ_EXTENSION) \
	generic_power_onoff_setup_server.$(OBJ_EXTENSION) \
	generic_user_property_server.$(OBJ_EXTENSION) \
	light_ctl_server.$(OBJ_EXTENSION) \
	light_ctl_temperature_server.$(OBJ_EXTENSION) \
	light_hsl_hue_server.$(OBJ_EXTENSION) \
	light_hsl_saturation_server.$(OBJ_EXTENSION) \
	light_hsl_server.$(OBJ_EXTENSION) \
	light_lc_server.$(OBJ_EXTENSION) \
	light_lightness_server.$(OBJ_EXTENSION) \
	light_lightness_setup_server.$(OBJ_EXTENSION) \
	light_xyl_server.$(OBJ_EXTENSION) \
	scene_server.$(OBJ_EXTENSION)

#
# ----------- Modules ----------------------
#
BASIC_MODULES = \
	common \
	bearer \
	transport \
	net \
	access \
	provision \
	utils \
	model_coreclient \
	model_coreserver

MODEL_MODULES = \
	model_client \
	model_server

# ---- Targets

all: $(LIBDIR) $(LIBDIR)/$(LIB_CORENAME) $(LIBDIR)/$(LIB_MODELSNAME)

clean:
	$(RM) *.$(OBJ_EXTENSION)
	$(RM) $(BASIC_MODULES)
	$(RM) $(MODEL_MODULES)

$(LIBDIR)/$(LIB_CORENAME): $(BASIC_MODULES)
	@echo "Linking EtherMind Modules: Stack Library Build ......"
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(LIBDIR)/$(LIB_CORENAME) $^

$(LIBDIR)/$(LIB_MODELSNAME): $(MODEL_MODULES)
	@echo "Linking EtherMind Modules: Stack Library Build ......"
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(LIBDIR)/$(LIB_MODELSNAME) $^

$(LIBDIR):
	@echo "Starting Build... Dectected Machine: $(host), OS: $(os)"
	@echo "Creating Library Folder......"
	$(MAKEDIR) $(call FixPath, $@)

common: $(COMMON_OBJS)
	@echo "----------------------COMMON---------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(COMMON_MODULE) $(COMMON_OBJS)
	$(SIZE) $(COMMON_MODULE) >> $(SIZE_LOG)
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

bearer: $(BEARER_OBJS)
	@echo "----------------------BEARER-------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(BEARER_MODULE) $(BEARER_OBJS)
	$(SIZE) $(BEARER_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

transport: $(TRANSPORT_OBJS)
	@echo "----------------------TRANSPORT-------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(TRANSPORT_MODULE) $(TRANSPORT_OBJS)
	$(SIZE) $(TRANSPORT_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

net: $(NET_OBJS)
	@echo "----------------------NET-------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(NET_MODULE) $(NET_OBJS)
	$(SIZE) $(NET_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

access: $(ACCESS_OBJS)
	@echo "----------------------ACCESS-------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(ACCESS_MODULE) $(ACCESS_OBJS)
	$(SIZE) $(ACCESS_MODULE) >> $(SIZE_LOG)
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

provision: $(PROVISION_OBJS)
	@echo "----------------------PROVISION-------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(PROVISION_MODULE) $(PROVISION_OBJS)
	$(SIZE) $(PROVISION_MODULE) >> $(SIZE_LOG)
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

utils: $(UTILS_OBJS)
	@echo "----------------------UTILS------------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(UTILS_MODULE) $(UTILS_OBJS)
	$(SIZE) $(UTILS_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

model_coreserver: $(MODEL_CORESERVER_OBJS)
	@echo "----------------------MODEL CORESERVER------------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(MODEL_CORESERVER_MODULE) $(MODEL_CORESERVER_OBJS)
	$(SIZE) $(MODEL_CORESERVER_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

model_coreclient: $(MODEL_CORECLIENT_OBJS)
	@echo "----------------------MODEL CORECLIENT------------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(MODEL_CORECLIENT_MODULE) $(MODEL_CORECLIENT_OBJS)
	$(SIZE) $(MODEL_CORECLIENT_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

model_server: $(MODEL_SERVER_OBJS)
	@echo "----------------------MODEL SERVER------------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(MODEL_SERVER_MODULE) $(MODEL_SERVER_OBJS)
	$(SIZE) $(MODEL_SERVER_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

model_client: $(MODEL_CLIENT_OBJS)
	@echo "----------------------MODEL CLIENT------------------------------" >> $(SIZE_LOG)
	$(LD) $(LD_FLAGS) $(LD_OUTPUT) $(MODEL_CLIENT_MODULE) $(MODEL_CLIENT_OBJS)
	$(SIZE) $(MODEL_CLIENT_MODULE) >> $(SIZE_LOG)	
	@echo "-------------------------------------------------------" >> $(SIZE_LOG)
	@echo ""

